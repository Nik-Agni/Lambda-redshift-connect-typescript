import {
  RedshiftDataClient,
  ExecuteStatementCommand,
  GetStatementResultCommand,
  DescribeStatementCommand
} from "@aws-sdk/client-redshift-data";

const redshiftClient = new RedshiftDataClient({ region: process.env.AWS_REGION });

/**
 * Executes any SQL query (SELECT, INSERT, UPDATE, DELETE).
 * Returns data only for SELECT statements.
 */
export const executeRedshiftQuery = async (sql: string, isSelect = false): Promise<any> => {
  const execCommand = new ExecuteStatementCommand({
    ClusterIdentifier: process.env.REDSHIFT_CLUSTER_ID,
    Database: process.env.REDSHIFT_DB,
    DbUser: process.env.REDSHIFT_USER,
    Sql: sql
  });

  const execResult = await redshiftClient.send(execCommand);
  const statementId = execResult.Id;
  if (!statementId) throw new Error("Failed to execute statement");

  // Wait for the statement to complete
  let status = "STARTED";
  while (["STARTED", "SUBMITTED", "PICKED"].includes(status)) {
    await new Promise((res) => setTimeout(res, 1000));
    const describe = await redshiftClient.send(new DescribeStatementCommand({ Id: statementId }));
    status = describe.Status ?? "";
    if (status === "FAILED") throw new Error(`Query failed: ${describe.Error}`);
  }

  // Return results for SELECT only
  if (!isSelect) return { success: true };

  const result = await redshiftClient.send(new GetStatementResultCommand({ Id: statementId }));
  const columnNames = result.ColumnMetadata?.map((c) => c.name) || [];

  return (result.Records || []).map((row) => {
    const rowObj: Record<string, any> = {};
    row.forEach((col, i) => {
      rowObj[columnNames[i]] = Object.values(col)[0];
    });
    return rowObj;
  });
};
